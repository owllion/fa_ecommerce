name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  RUN_REGION: us-central1

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    #jobs is gonna run on ubuntu

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name: Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv #cache路徑
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }} #每個cache的獨特key，可用來做辨識hasfile是內建函數，最後return一個hash
          restore-keys: |
            ${{ runner.os }}-venv-
          #用來恢復cache(如果cache expire或照不到)反之就會重新建立cache

      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Activate venv and Run Test
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}

          DEFAULT_AVATAR_URL: ${{ secrets.DEFAULT_AVATAR_URL }}

          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

          GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}

          # Redis
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PW: ${{ secrets.REDIS_PW }}

          # JWT
          ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}

          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          RESET_PWD_SECRET: ${{ secrets.RESET_PWD_SECRET }}
          VALIDATE_EMAIL_SECRET: ${{ secrets.VALIDATE_EMAIL_SECRET }}

          #email setting
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_PWD: ${{ secrets.MAIL_PWD }}

          # LINE Pay
          LINEPAY_CHANNEL_ID: ${{ secrets.LINEPAY_CHANNEL_ID }}

          LINEPAY_CHANNEL_SECRET_KEY: ${{ secrets.LINEPAY_CHANNEL_SECRET_KEY }}

          LINEPAY_RETURN_HOST: ${{ secrets.LINEPAY_RETURN_HOST }}

          LINEPAY_RETURN_CONFIRM_URL: ${{ secrets.LINEPAY_RETURN_CONFIRM_URL }}

          # API
          REQUEST_API: ${{ secrets.REQUEST_API }}

        run: . venv/bin/activate && pytest

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up gcloud Cloud SDK environment
      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Info
        run: gcloud info

      # Build and push image to Google Container Registry
      # - name: Build
      #   run: gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-gcp .

      # - uses: "google-github-actions/auth@v1"
      #   with:
      #     workload_identity_provider: "projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider"
      #     service_account: "projects/fastapi-ec/serviceAccounts/local-docker-service@fastapi-ec.iam.gserviceaccount.com"

      # Deploy image to Cloud Run
      # - name: Deploy
      #   run: |-
      #     gcloud run deploy my-gcp \
      #       --quiet \
      #       --region "$RUN_REGION" \
      #       --image "gcr.io/$PROJECT_ID/$SERVICE_NAME" \
      #       --platform "managed" \
      #       --port 80 \
      #       --allow-unauthenticated

      - uses: "google-github-actions/deploy-cloudrun@v1"
        id: "deploy"
        with:
          service: "my-gcp"
          image: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-gcp"
          region: "asia-northeast1"
