name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    #jobs is gonna run on ubuntu

    steps:
      # Step 1
      # to clone your repository into the GitHub Actions' execution environment, allowing your workflow to perform operations on the code in the repository.
      - uses: actions/checkout@v2

      # Step 2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      # Step 3
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv
      # Step 4
      - name: Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv #for later access
        with:
          path: venv #cache路徑
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }} #每個cache的獨特key，可用來做辨識hasfile是內建函數，最後return一個hash
          restore-keys: |
            ${{ runner.os }}-venv-
          #用來恢復cache(如果cache expire或照不到)反之就會重新建立cache
      # Step 5
      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
        #沒有cache就重新建立一個venv &安裝套件

      # Step 6
      - name: Activate venv and Run Test
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}

          DEFAULT_AVATAR_URL: ${{ secrets.DEFAULT_AVATAR_URL }}

          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

          GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}

          # Redis
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PW: ${{ secrets.REDIS_PW }}

          # JWT
          ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}

          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          RESET_PWD_SECRET: ${{ secrets.RESET_PWD_SECRET }}
          VALIDATE_EMAIL_SECRET: ${{ secrets.VALIDATE_EMAIL_SECRET }}

          #email setting
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_PWD: ${{ secrets.MAIL_PWD }}

          # LINE Pay
          LINEPAY_CHANNEL_ID: ${{ secrets.LINEPAY_CHANNEL_ID }}

          LINEPAY_CHANNEL_SECRET_KEY: ${{ secrets.LINEPAY_CHANNEL_SECRET_KEY }}

          LINEPAY_RETURN_HOST: ${{ secrets.LINEPAY_RETURN_HOST }}

          LINEPAY_RETURN_CONFIRM_URL: ${{ secrets.LINEPAY_RETURN_CONFIRM_URL }}

          # API
          REQUEST_API: ${{ secrets.REQUEST_API }}

        run: |
          echo "${{ secrets.MAIL_FROM }}"
          . venv/bin/activate && pytest
      # Step 7
      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.10/site-packages
          zip -r9 ../../../../api.zip .

      # Step 8
      - name: Add App to Zip file
        run: cd ./app && zip -g ../api.zip -r .

      # Step 9
      #Upload the api.zip to GitHub server as an artifact using actions/upload-artifact@v2 . This will enable the next 'job' to retrieve back the artifact file for the deployment of our lambda package which is our api.zip file.
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip

      #Docker
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      # tags: traversal/react-shopapp:1.0

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    #This job will only run when the continuous-integration build is succeeded.
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # Step 2
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api
          #The artifact name defines in this step must the same as the name used during the step of uploading the artifact
      # Step 3
      - name: Upload to S3
        run: aws s3 cp api.zip s3://fastapiecbucket1/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      # Step 4
      - name: Deploy new Lambda
        run: aws lambda update-function-code \
          --function-name fastapiEcApi \
          --s3-bucket fastapiecbucket1 \
          --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
